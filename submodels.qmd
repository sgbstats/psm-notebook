---
title: "Submodels"
---

# *submodels function*

*This is the main function in the submodels family.*

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
```

```{r, file="C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\R\\prediction\\submodels.R", echo=TRUE, message=FALSE, warning=FALSE, eval=FALSE}
```

### Basic premise of the function

1.  Housekeeping and sanitizing inputs

2.  Getting the missingness patterns (see [Helper functions](helper_functions.qmd))

3.  Stops the computing of models that would have dropped the force variables.

4.  Set the threshold (uses the number of variables in the model)

5.  Loops through all of the patterns and builds the models, which data is used depends on whether there is enough data.

TODO: Examples

### Example: EFFECT

Note: some missingness added for good measure and 80/20 test train ratio

```{r, echo=FALSE, message=FALSE, warning=FALSE}
load("C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\data/study_data.RDa")
source("C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\R/prediction/submodels.R")
source("C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\R/prediction/predict_submodels.R")
source("C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\R/prediction/print_submodels.R")
source("C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\R/prediction/model_breakdown.R")
source("C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\R/prediction/auc.R")
source("C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\R/prediction/auc_boot.R")
source("C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\R/prediction/unpack.R")
source("C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\R/prediction/missingness_pattern.R")
source("C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\R/prediction/remove_missing_vars.R")

cols_to_na=c("fev1_bl", "smoking_bl", "eos_bl")
set.seed(2)
data1=study_data$EFFECT$ad %>%
  mutate(across(all_of(cols_to_na), ~ {
    n <- length(.x)
    na_indices <- sample(n, size = floor(0.2 * n))
    .x[na_indices] <- NA
    .x
  })) 
data1$train=as.logical(rbinom(nrow(data1),1, 0.8))
data=data1

```

```{r, message=FALSE, warning=FALSE, eval=TRUE}
model=exac_modsev_n ~ arm_ipd*eos_bl+age_imp+exac_bl+sex+smoking_bl+fev1_bl+offset(trt_dur)
submodels.object=submodels(data %>% filter(train), model, MASS::glm.nb,force_variables="trt_dur", contrasts=NULL, remove_model_data = c())

#example
submodels.object[1]

submodels.object$meta$vars
head(submodels.object$meta$mp.info)
submodels.object$meta$threshold


```

To do: think about classes of the object so that you can just use predict() and print() and it just knows what to do.

# predict.submodels

```{r, file="C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\R\\prediction\\predict_submodels.R", echo=TRUE, message=FALSE, warning=FALSE, eval=F}
```

-   Various bits of house keeping getting the model ready (maybe the model_breakdown function can be removed and inheritted from the main function)

```{r}
newdata=data %>% filter(!train)
test=predict.submodels(newdata=newdata, submodels.object = submodels.object, se.fit=T,retain_lhs = T,include_mp=T, type='response')

head(test %>% 
       mutate(rn=row_number(), .by="mp") %>% 
       arrange(rn) %>% 
       dplyr::select(-rn))
```

# auc

```{r, file="C:\\Users\\mbbx4sb5\\Dropbox (The University of Manchester)\\00_ICS_RECODE_Shared\\R\\prediction\\auc.R", echo=TRUE, message=FALSE, warning=FALSE}
```

-   Housekeeping

-   Cross join on the data to make every combination and then filter so that there is one row for each pair of data points, minus those that equal actual outcomes.

-   Output the mean proportion of correct answers (with invert if necessary)

-   Run Boostrap if desired.

```{r}
auc(test, "exac_modsev_n", "fit")
```
